Copyright (c) 2015, Alex Kramer <kramer.alex.kramer@gmail.com>
See the LICENSE.txt file at the top-level directory of the distribution.

I. Description
==============

This document contains general guidelines for writing modern Fortran source
code for numerical computing applications. These guidelines are based purely on
my own experiences writing Fortran code for medium- to large-scale numerical
scientific computing projects. There are a variety of available source code
style and coding guides, each with their own benefits; this document exists
solely to establish consistency within my own work. I hope others may find it
useful as well.

The guiding principle of this document is that all code should strive to be
comprehensible, even if that comes at a small performance cost. Modern
compilers are proficient at optimizing individual pieces of code, and the cost
of computational resources is low enough that it should not be necessary to
sacrifice code quality for marginal performance improvements in all but the
most extreme situations. Manual optimization should primarily come in the form
of algorithm selection and careful program design.

While this document is written primarily for purely numerical computing,
Fortran can be used as a general purpose language. Some aspects of this
document may be useful for non-numerical applications. Of particular note are
sections II, and IV-VI, which discuss general style guidelines, intrinsic data
types, I/O, and advanced modern Fortran features. However, since the primary
use and design case of Fortran is numeric scientific computing, it may be
better to use a different language designed for general purpose use instead of
forcing Fortran to function as a general purpose language.

II. General style guidelines
============================

The fundamental principle of any style guide is consistency. I suggest the
following, in addition to widely-accepted "good programming practices":

* All code should be written in modern Fortran free-form format and syntax,
  using lowercase characters. Moreover, all code should adhere to compiler-
  independent standards. Whenever possible, code should strive to be platform-
  independent, although it is usually safe to assume POSIX-compliance.

* All code should be grouped into concise, logical sections and separated into
  various source code files accordingly. At the highest level, only programs
  and modules should be used, with one module per source code file.

* Names should be concise, but descriptive enough for a qualified audience to
  easily understand their function in the context of the source code.
  Appropriate documentation should supplement good names; it is not a
  replacement. Moreover, names should use_underscores to denote breaks, instead
  of usingCamelCase.

* Spaces, not tabs, should be used, with two spaces indicating each successive
  level of indentation. Line breaks should be used as needed to improve
  readability and separate logical sections of code.

* Line breaks should occur at 79 characters.

* All program units should use the `implicit none` statement.

* All functions should be pure, in that they do not modify any input arguments.
  If a procedure has side effects, it should be a subroutine.

* All subroutines should explicitly specify the intent of input arguments.

* When possible, variables and procedures should be private, with public
  elements explicitly declared as such, either through the use of a shared
  module or `public` statements. Moreover, `use` statements should be explicit,
  as in:

  ```
  use modname, only: ...
  ```

* Individual procedures should not track their own state (e.g. through the
  `save` attribute). State-tracking should be done at the module level or by
  passing state variables in procedure argument lists.


III. Overall program organization
=================================

Modules are the core logical units of a program. There are two types of modules:

* Program-independent modules

  These modules have no dependencies, with the exception of basic global
  variables, such as kind parameters or numerical constants. It should be
  simple to copy and paste these modules as is for use in other projects.

* Program-dependent modules

  These modules are integrated with the overall structure of the program in
  question. They may depend on shared program-specific variables or implement
  functionality that would not make sense outside of their overall program.

Whenever possible, modules should be program-independent. This generally
results in cleaner and more maintainable code. Of course, there is such a thing
as writing overly modular / abstract code. As a general rule, if a module does
something that could be useful in other programs, it should be written in a
program-independent manner.

III.a Required modules
----------------------

In addition to an actual program, a project should have the following modules
(files) that are used as needed.

./globvars.f90 (global variable module)
./progvars.f90 (program variable module)
./setup.f90 (setup / cleanup module)

III.a.1 Global variable module
______________________________

The global variable module (./globvars.f90) provides kind parameters, numerical
constants, and any other variables that are truly program independent. This
module should be very short. If needed, program-independent modules may use
this module as follows:

```
module mod_name
  use globvars, only: ...

  ...

end module mod_name
```

III.a.2 Program variable module
_______________________________

The program variable module (./progvars.f90) provides program parameters and
core variables for the program in question. This module should generally be
fairly short; the vast majority of variables in numerical codes can be declared
at the module-specific level.

This module should also use the global variable module, to prevent redundant
usage statements:

```
module progvars
  use globvars, only: ...

  ...

end module progvars
```

The usage of this module is an exception to the rule given in section II that
module usage statements should employ the ``only`` keyword. Since this module
is explicitly meant for core program variables (in some sense, "global"
variables, there is no problem in modules using the entire module. Of course,
employing the ``only`` keyword is still recommended, even though it is not
necessary.

III.a.3 Setup / cleanup module
______________________________

The setup / cleanup module (./setup.f90) is responsible for all program
initialization and cleanup. It should have two (and only two) public
subroutines:

  * setup_init()
  * setup_cleanup()

that can be called by the main program pre- and post-execution. These routines
are responsible for ensuring that all required parameters, program variables,
modules, etc. are properly initialized and cleaned up.

Moreover, for clarity, all program-dependent module dependencies should be
handled by the setup/cleanup module. The reasoning for this is that it
simplifies top-level dependency handling, especially if multiple
program-dependent modules depend on the same program-independent module.

Nested program-independent dependencies of program-independent modules should
still be handled within each respective program-independent module.

III.b Module Organization
-------------------------

Within each module, private module variables should be managed by public
initialization and cleanup subroutines within that module, which can be easily
called by a program's setup module before and after program execution.

Modules should follow the following format:

```
! Example module using `dp` to indicate a double precision floating point kind
module modname
  ! If needed, global variable use statement here
  use globvars, only: dp

  ! Additional use statements here

  implicit none

  private

  ! General module methods
  public :: modname_init
  public :: modname_cleanup

  ! Other public methods declared here
  ...

  ! Private module variables
  ...

contains

  ! Initialization subroutine
  subroutine modname_init(...)

  ...

  end subroutine modname_init

  ! Cleanup subroutine
  subroutine modname_cleanup(...)

  ...

  end subroutine modname_cleanup

  ! Example function
  real(dp) function modname_func1(...) result(val)

    ...

  end function modname_func1

  ! Example subroutine
  subroutine modname_sub1(...)

    ...

  end subroutine modname_sub1

end module modname
```

Note that all procedures are prefaced with the name of the module. This
convention is for readability when using those procedures in other modules or
programs; it becomes clear where the procedure in question originates.

Moreover, note that `implicit none` is only specified at the top of the module;
it does not need to be given in functions and subroutines inside the module,
since the implicit statement applies to all sub-units within the overall
program unit.

III.c Overall program format
----------------------------

A program should be formatted as follows:

```
program prog_name
  use progvars, only: ...
  use setup, only: setup_init, setup_cleanup

  ! Any other use statements here
  ...

  implicit none

  ! Local variables here
  ...

  call setup_init()

  ! Program execution
  ...

  call setup_cleanup()

end program prog_name
```

IV. Data types
==============

IV.a Numbers
------------
Relevant kind parameters should be declared in a global variable module (see
above), and used to declare all numbers. For instance, if `dp` refers to a
double precision kind, then a real floating point numbers `x` should be
declared as:

```
real(dp) :: x
``

and constants using that same kind should be denoted with the `dp` suffix, as in:

```
1.0_dp
```

IV.b Arrays and dynamic memory
------------------------------

IV.b.1 General array guidlines
______________________________

Intrinsic procedures should always be used when available. not only does this
increase readability, but intrinsic procedures can generally be optimized more
than manual implementations.

Automatic arrays and allocatable arrays should be used to implement dynamic
memory; pointers should only be used when allocatable arrays are not possible,
as they are the most error-prone. The most common use case when pointers are
necessary is when implementing user-defined types, classes, and objects where
allocatable arrays cannot be used.

When passing arrays into and out of procedures, use assumed-shape patterns
whenever possible; this does not copy data and passes the shape and size of the
array to the called procedure automatically. Note that by storing procedures in
modules, the compiler handles creating the required data interfaces.

Unless using a compiler that does not support Fortran 2003, array constructors
should use square bracket "[" and "]" delimiters for array constructors instead
of the older "(/" and "/)" used in prior standards.

IV.b.2 Element-wise array operations
____________________________________

Elemental procedures should be the preferred way of implementing element-wise
operations, and element-wise operations should be restricted to compatible
shapes.

IV.b.3 Multidimensional array slicing
_____________________________________

For performance, multidimensional array slices should always use contiguous
strides, where the colons are on the left, e.g. `m(:, :, 1)`. This avoids skips
in memory access.


IV.c Characters and formatting
------------------------------

TODO

V. Input / Output
=================

TODO

VI. Advanced modern Fortran features
===================================

V.a Function overloading
------------------------

Generic functions via interfaces are useful, but should be used with
care. Function overloading for the sake of reusing specific names between
modules without conflict should be avoided, and is always resolved by using the
module-procedure naming convention discussed above. Additionally, using a
"managing" procedure that determines which inner procedure to call based on
argument type may be more useful and / or result in more readable code than
using an interface statement.

V.b Derived types, classes, and objects
---------------------------------------

While modern Fortran standards provide extensive support for object-oriented
programming, Fortran remains a largely procedural language, with full
object-oriented features requiring additional overhead to use. For many purely
numerical applications, adopting a procedural paradigm with sufficiently
modular code may result in more readable code than using an object-oriented
paradigm. Object-oriented features should only be used when necessary.

Derived (user-defined) types, classes, and objects should always be defined
within their own modules. Care should be taken when overloading operators for
derived types, as this significantly raises code complexity.

Also, when using derived types with an `intent(out)` statement in a procedure,
all components of that derived type should be assigned within the procedure,
otherwise those components could become undefined on exit. `intent(out)`
behaves like the result variable of a function, where all components must be
assigned.

V.c Pointers
============

TODO
